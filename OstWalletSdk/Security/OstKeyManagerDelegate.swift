/*
 Copyright Â© 2019 OST.com Inc
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
 http://www.apache.org/licenses/LICENSE-2.0
 */

import Foundation

protocol OstKeyManagerDelegate {
    /// Signed data return type
    typealias SignedData = (address: String, signature: String)
    
    //MARK: - Device
    
    /// Create the device private key and address.
    /// This also stores the private key and address securly in the keychain
    ///
    /// - Returns: Device address
    /// - Throws: Exceptions that occurs while storing the address or key in the keychain
    func createDeviceKey() throws -> String
   
    /// Get current user's stored device address from keychain
    ///
    /// - Returns: Device address if available otherwise nil
    func getDeviceAddress() -> String?
    
    /// Get the 12 words mnemonic keys for the current user's device address
    ///
    /// - Returns: JSON serialized 12 words mnemonics key
    /// - Throws: Exception that occurs while getting the keys from keychain
    func getDeviceMnemonics() throws -> [String]?

    //MARK: - API
    
    /// Function to create API address and key.
    /// The address and key are stored securely in the keychain.
    ///
    /// - Returns: API address
    /// - Throws: Exceptions that occurs while creating and storing the keys
    func createAPIKey() throws -> String
    
    /// Get the current users API address
    ///
    /// - Returns: API address
    func getAPIAddress() -> String?
    
    //MARK: - Session
    
    /// Create the session private key and address.
    /// This also stores the private key and address securly in the keychain
    ///
    /// - Returns: Device address
    /// - Throws: Exceptions that occurs while storing the address or key in the keychain
    func createSessionKey() throws -> String
    
    /// Get all the session addresses available in the device
    ///
    /// - Returns: Array containing session addresses
    /// - Throws: OstError
    func getSessions() throws -> [String]
    
    /// Delete session address and its key
    ///
    /// - Parameter sessionAddress: Session address
    /// - Throws: OstError
    func deleteSessionKey(sessionAddress: String) throws
    
    /// Delete all sessions for user
    func deleteAllSessions()
    
    //MARK: - Sign
    
    /// Sign message with device private key
    ///
    /// - Parameter tx: Transaction string to sign
    /// - Returns: Signed message
    /// - Throws: OstError
    func signWithDeviceKey(_ tx: String) throws -> String
    
    /// Sign message with API private key
    ///
    /// - Parameter message: Message to sign
    /// - Returns: Signed message
    /// - Throws: OstError
    func signWithAPIKey(message: String) throws -> String
    
    /// Sign data with recovery key
    ///
    /// - Parameters:
    ///   - tx: Transaction string to sign
    ///   - userPin: User pin
    ///   - passphrasePrefix: Passphrase prefix
    ///   - salt: Salt used to generate recovery key
    /// - Returns: SignedData
    /// - Throws: OstError
    func signWithRecoveryKey(
        tx:String,
        userPin: String,
        passphrasePrefix: String,
        salt: String) throws -> SignedData
    
    /// Sign data with private key that is generated by mnemonics keys
    ///
    /// - Parameters:
    ///   - tx: Transaction to sign
    ///   - mnemonics: 12 words mnemonics keys
    /// - Returns: Signed message
    /// - Throws: OstError
    func signWithExternalDevice(_ tx: String,
                                withMnemonics mnemonics: [String]) throws -> String
    
    /// Sign message with session's private key
    ///
    /// - Parameter tx: Transaction string to sign
    /// - Returns: Signed message
    /// - Throws: OstError
    func signWithSessionKey(_ tx: String,
                            withAddress address: String) throws -> String
    
    //MARK: - Recovery Owner Address
    
    /// Get recovery owner address
    ///
    /// - Parameters:
    ///   - passphrasePrefix: Passphrase prefix
    ///   - userPin: User pin
    ///   - salt: Salt used to create recovery owner address
    /// - Returns: Recovery owner address
    /// - Throws: OstError
    func getRecoveryOwnerAddressFrom(
        passphrasePrefix: String,
        userPin: String,
        salt: String) throws -> String
    
    //MARK: - Pin
    
    /// Verify pin. This will first check the pin hash, if it does not match
    /// then it will generate the recovery owner address and match it.
    ///
    /// - Parameters:
    ///   - passphrasePrefix: Application Passphrase prefix
    ///   - userPin: User pin
    ///   - salt: Salt
    ///   - recoveryOwnerAddress: Recovery owner address
    /// - Returns: `true` if verified otherwise `false`
    func verifyPin(
        passphrasePrefix: String,
        userPin: String,
        salt: String,
        recoveryOwnerAddress: String) -> Bool
    
    /// Delete stored pin hash
    ///
    /// - Throws: OstError
    func deletePinHash() throws
    
    //MARK: - Delete
    
    /// Clear user device ifor
    ///
    /// - Throws: OstError
    func clearUserDeviceInfo() throws
}
